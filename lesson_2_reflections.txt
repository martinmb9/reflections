What happens when you initialize a repository? Why do you need to do it?
When you initialize a repository, Git creates a new "file," .git, which allows you to track the files within that directory. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?
A file cannot be commited without being added to the staging area, first. It can help prevent changes being commited if they're not ready to be commited. For example, if changes are made to more than 1 file, but you want to commit changes to only 1 file, not having a staging area would commit all changes. With the staging area, we can control what changed files are commited. This can help us make commits when one logical change is made rather than commiting changes to all files at once, unless we want to.

How can you use the staging area to make sure you have one commit per logical
change?
By adding files to the staging area, you can control what gets commited and what doesn't. You can add files to the staging area when you've made one logical change, then commit when you're ready.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
